[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC Payroll Data Analysis",
    "section": "",
    "text": "1 Introduction\nThe topic that we are working on is New York City Payroll Data Analysis. Payroll data provides insights into workforce dynamics, and demographic patterns of municipal employees of New York City. We aim to identify trends and patterns in the payroll of New York municipal employees spanning the last 10 years (2014 - 2023). There are few topics that we think are important to study in order to understand the trends.\n\nEmployee Compensation Distribution:\n\nExamine the distribution of the total compensation of all the employees, and try to see gain insights on how salaries are distributed.\n\nExamining the Breakdown of the Salaries\n\nHow are the various components of the total pay distributed over time?\n\nInfluence of Geographic Location and Agency on Budget Allocation:\n\nHow does the geographic work location (borough) in New York City, along with the agency, influence the budget allocation?\n\nWork Experience, Payroll, and Borough Connections:\n\nIs there any connections between an individual’s amount of work experience, payroll, and the specific borough where they are employed?\n\nJob Profile & Team Impact on Payroll:\n\nDoes the job profile (Title Description) have an impact on the payroll? / Are certain type of jobs are agency specific? How do the salaries vary?\n\nOvertime Work and Payroll Relationship Over Time:\n\nHow has the relationship between overtime work and the payroll evolved over time?\n\nLeave Status and Workforce Dynamics:\n\nExamining the leave status of employees.\nAdditionally, we can study financial resources allocation and how much resources are devoted to overtime. Examining the impact of job profiles on payroll and identifying any borough-specific jobs will offer a deeper understanding of the payroll dynamics. Furthermore, the analysis into the relationship between overtime work and payroll aims to uncover insights into work culture and potential areas for improvement in work-life balance and the payroll itself(underpaid / overpaid).\nBy addressing above mentioned questions, through exploratory data analysis and visualization we can gain insights to form more inclusive and fair policies aimed at bridging income gaps, a better and inclusive job market, and guiding initiatives related to education, up-skilling, and training to even out the disparity, if any."
  },
  {
    "objectID": "data.html#technical-description",
    "href": "data.html#technical-description",
    "title": "2  Data",
    "section": "2.1 Technical Description",
    "text": "2.1 Technical Description\nThe data that we will be using to analyze Payroll Data is from the NYC Open Data website and is titled as Citywide Payroll Data (Fiscal Year). The data set was created back in 2015 and has been constantly been updated on a annual basis (last update was on November 28,2023). It tells us about the amount of money spent on salaries and overtime pay for all municipal employees based in New York City. The data is provided by Office of Payroll Administration (OPA).\nThe data can be downloaded as a CSV file from the website mentioned above. The entirety of the dataset consists of 5.66 million rows (essentially 5.66 million municipal employees) and 17 columns. Every row basically tells us about the employee salary, their work location, agency, base pay, overtime (if any), etc.\nHowever, the dataset is too large for efficient processing. Hence, we randomly sample our data and retrieve 10000 samples for our analysis. The code for the same can be found below, but has been commented out, as such large files cannot be uploaded to GitHub, and rendering will be affected.\n\n\nCode\n# complete_payroll_data &lt;-\n#   fread(\"./Data/nyc_payroll_data_complete.csv\")\n# # Take Random sample of 10000 rows\n# random_data &lt;- nyc_payroll_data[sample(nrow(nyc_payroll_data)),]\n# nyc_payroll_data &lt;- randomized_data[1:10000,]\n# write.csv(nyc_payroll_data, paste(\"./Data/\", 'nyc_payroll_data.csv'))\n\n#Importing the Dataset\nnyc_payroll_data &lt;- read.csv(\"./Data/nyc_payroll_data.csv\")\n\n\n\n\nCode\nprint(dim(nyc_payroll_data))\n\n\n[1] 10000    17\n\n\n\n\nCode\n# Display Columns of the dataset\n# Display Columns of the dataset\nkable(data.frame(Column_Names = names(nyc_payroll_data)), \"markdown\")\n\n\n\n\n\nColumn_Names\n\n\n\n\nFiscal.Year\n\n\nPayroll.Number\n\n\nAgency.Name\n\n\nLast.Name\n\n\nFirst.Name\n\n\nMid.Init\n\n\nAgency.Start.Date\n\n\nWork.Location.Borough\n\n\nTitle.Description\n\n\nLeave.Status.as.of.June.30\n\n\nBase.Salary\n\n\nPay.Basis\n\n\nRegular.Hours\n\n\nRegular.Gross.Paid\n\n\nOT.Hours\n\n\nTotal.OT.Paid\n\n\nTotal.Other.Pay\n\n\n\n\n\nPresented above are the columns of the dataset.\nOn further examination of the data, we find that there are few inconsistencies in the data:\n\nThe column indicative of the Middle Initial of employees, namely, Mid.Init, does not have explicit NA values. However, it has empty strings such as ““,”-” and “.” which essentially show empty entries and can be considered as NA values. This conversion needs to be made.\n“Work.Location.Borough” has different boroughs from different parts of New York State such as Albany, Westchester, Delaware etc. Moreover, Staten Island has been mentioned as Richmond County and Manhattan and Bronx have been mentioned twice, where they differ in capitalization. The data also has empty strings.\n\nFor our study, we wish to consider only the 5 boroughs of NYC, namely, Manhattan, Brooklyn, Queens, Bronx and Staten Island. The data needs to be preprocessed for the same.\n\nThe salaries for employees have not been mentioned on a consistent scale. We have base salaries mentioned per annum, per day, per hour and on a prorated annual basis as well. The scale needs to be consistent for fair comparisons, and we look to convert the data to a “per Day” basis, so as to compare our results with the daily wage.\nFinally, the data after our preprocessing will contain NA values which need to be dealt with.\n\nThe above inconsistencies have been made based on our analysis as seen below. For the sake of clean code, we have excluded the code and analysis for those columns which did not have any inconsistencies.\n\n\nCode\n#Analyzing Data to Uncover any Possible Inconsistencies\nunique(nyc_payroll_data$Mid.Init)\n\n\n [1] \"A\" \"\"  \"M\" \"L\" \"D\" \"T\" \"B\" \"W\" \"S\" \"K\" \"H\" \"R\" \"N\" \"J\" \"C\" \"F\" \"V\" \"E\" \"Y\"\n[20] \"P\" \"I\" \"O\" \"G\" \"X\" \".\" \"U\" \"Z\" \"1\" \"Q\" \"-\"\n\n\nCode\nunique(nyc_payroll_data$Work.Location.Borough)\n\n\n [1] \"BROOKLYN\"    \"MANHATTAN\"   \"OTHER\"       \"QUEENS\"      \"\"           \n [6] \"BRONX\"       \"RICHMOND\"    \"ULSTER\"      \"WESTCHESTER\" \"DUTCHESS\"   \n[11] \"SULLIVAN\"    \"DELAWARE\"    \"ALBANY\"      \"Manhattan\"   \"Bronx\"      \n\n\nCode\nunique(nyc_payroll_data$Pay.Basis)\n\n\n[1] \"per Hour\"        \"per Annum\"       \"per Day\"         \"Prorated Annual\"\n\n\nApart from handling NA values, the inconsistencies have been dealt with below:\n\n\nCode\n# Converting Empty Strings to NA values in \"Mid.Init\"\nnyc_payroll_data$Mid.Init[nyc_payroll_data$Mid.Init==\"\"] &lt;- NA\nnyc_payroll_data$Mid.Init[nyc_payroll_data$Mid.Init==\"-\"] &lt;- NA\nnyc_payroll_data$Mid.Init[nyc_payroll_data$Mid.Init==\".\"] &lt;- NA\n\n# Fixing Issues in \"Work.Location.Borough\"\nnyc_payroll_data$Work.Location.Borough[nyc_payroll_data$Work.Location.Borough==\"\"] &lt;- NA\nnyc_payroll_data$Work.Location.Borough[nyc_payroll_data$Work.Location.Borough==\"Manhattan\"] &lt;- \"MANHATTAN\"\nnyc_payroll_data$Work.Location.Borough[nyc_payroll_data$Work.Location.Borough==\"Bronx\"] &lt;- \"BRONX\"\nnyc_payroll_data$Work.Location.Borough[nyc_payroll_data$Work.Location.Borough==\"RICHMOND\"] &lt;- \"STATEN ISLAND\"\n\nnyc_boroughs &lt;- c(\"BROOKLYN\", \"MANHATTAN\", \"QUEENS\", \"BRONX\", \"STATEN ISLAND\")\nnyc_payroll_data &lt;- nyc_payroll_data[nyc_payroll_data$Work.Location.Borough %in% nyc_boroughs,]\n\n# Making Data Scale Consistent in Base.Salary through Pay.Basis \n# Adding new column \"Daily.Salary\"\n\nnyc_payroll_data &lt;- nyc_payroll_data[!(nyc_payroll_data$Pay.Basis %in% \"Prorated Annual\"),]\n\nnyc_payroll_data &lt;- nyc_payroll_data |&gt;\n  mutate(\n    Daily.Salary = case_when(\n      Pay.Basis == \"per Hour\" ~ Base.Salary * 24,\n      Pay.Basis == \"per Annum\" ~ Base.Salary / 365,\n      TRUE ~ Base.Salary\n    )\n  )\n\n\nWe save this data as a CSV and read the cleaned version for the next segment.\n\n\nCode\n# write.csv(nyc_payroll_data, \"./Data/cleaned_nyc_payroll.csv\", row.names = FALSE)\nclean_nyc_payroll &lt;- read.csv(\"./Data/cleaned_nyc_payroll.csv\")"
  },
  {
    "objectID": "data.html#research-plan",
    "href": "data.html#research-plan",
    "title": "2  Data",
    "section": "2.2 Research Plan",
    "text": "2.2 Research Plan\n\nTo understand the employee compensation, we can use a histogram to study the distribution of salaries.\nWhile understanding the distribution of total pay is important, we also plan to see how these salaries are broken down and how various components of these salaries are distributed, using Scatter Plots.\nWe can also use grouped bar charts, to understand these relationships over time.\nUsing a heatmap, with the budget as the color scale, we will be able to uncover any biases when it comes to salaries based on boroughs and agencies.\nA Mosaic plot will be ideal to unravel patterns and compare multivariate relationships when it comes to the salaries earned based on the Job Title and the boroughs.\nA faceted scatterplot, or a faceted barplot would help us present insights on how the relationship between overtime pay and the corresponding payroll has evolved over the years.\nSince we can show the boroughs of NYC using an actual map, we plan to categorize an individual’s work experience, and then use that to show how their compensation varies in different parts of NYC, w.r.t. their work experience.\nWe also aim to analyze the leave status and workforce dynamics. Leave status typically indicates whether an employee is on leave or not, and if so, what type of leave they are on. This information is often valuable for HR and management to understand workforce availability, plan for staffing needs, and monitor employee well-being.\nWe also plan to make use of D3 to make some other interactive graphs showing some other relationships."
  },
  {
<<<<<<< HEAD
=======
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing Value Analysis",
    "text": "2.3 Missing Value Analysis\n\n\nCode\ncolSums(is.na(clean_nyc_payroll)) |&gt; sort(decreasing = TRUE)\n\n\n                  Mid.Init             Payroll.Number \n                      3594                       2856 \n               Fiscal.Year                Agency.Name \n                         0                          0 \n                 Last.Name                 First.Name \n                         0                          0 \n         Agency.Start.Date      Work.Location.Borough \n                         0                          0 \n         Title.Description Leave.Status.as.of.June.30 \n                         0                          0 \n               Base.Salary                  Pay.Basis \n                         0                          0 \n             Regular.Hours         Regular.Gross.Paid \n                         0                          0 \n                  OT.Hours              Total.OT.Paid \n                         0                          0 \n           Total.Other.Pay               Daily.Salary \n                         0                          0 \n\n\nWe see that only one column, namely Payroll Number has missing values.\n\n\nCode\nplot_missing(clean_nyc_payroll, percent = FALSE)\n\n\n\n\n\nAs can be seen from the above plot, there are only two patterns which can be observed in our data. The first being the complete lack of NaN values, whereas the second pattern exhibits missing values in one column only, namely, Payroll Number.\nThe graph on the right shows that there are nearly 3000 rows exhibiting the second pattern, and about 7000 points exhibiting the first, where they do not have any missing values at all.\nWe also get to see which columns have missing values in the form of a bar chart on top, and see that only one column falls under this category.\n\n\nCode\nmissing_data.frame(clean_nyc_payroll) |&gt; image()\n\n\nNOTE: The following pairs of variables appear to have the same missingness pattern.\n Please verify whether they are in fact logically distinct variables.\n     [,1]        [,2]        \n[1,] \"Last.Name\" \"First.Name\"\n\n\n\n\n\nThis graph shows us the missing values in the entire dataset. The cells represent the actual values after scaling, defined by each row and column of the actual dataset. Higher values take on the lighter colors, whereas colors close to red represent values which are lower.\nThe values in black, indicate missing data. Here, we see that Payroll Number has missing data for nearly 3000 hundred contiguous rows."
  },
  {
>>>>>>> c38acfea2deba0350478e4b3b52edaee3cbca7e8
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
<<<<<<< HEAD
    "text": "Code\n# Importing Necessary Libraries\nlibrary(redav)\nlibrary(ggplot2)\nlibrary(ggridges)\nlibrary(dplyr)\nlibrary(ggalluvial)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(RColorBrewer)\n\n\n\n\nCode\nclean_nyc_payroll &lt;- read.csv(\"./Data/cleaned_nyc_payroll.csv\")\n\n\n\n\nCode\npayroll_no_outliers &lt;- clean_nyc_payroll %&gt;%\n    filter(between(Daily.Salary, quantile(Daily.Salary, 0.25) - 1.5 * IQR(Daily.Salary), quantile(Daily.Salary, 0.75) + 1.5 * IQR(Daily.Salary)))\n\nmedians &lt;- payroll_no_outliers %&gt;%\n    group_by(Work.Location.Borough) %&gt;%\n    summarize(MedianSalary = median(Daily.Salary))\n\npayroll_no_outliers &lt;- left_join(payroll_no_outliers, medians, by = \"Work.Location.Borough\")\n\nggplot(data = payroll_no_outliers, alpha = 0.1) +\n    geom_density_ridges(\n        mapping = aes(\n            x = Daily.Salary,\n            y = reorder(Work.Location.Borough, MedianSalary),\n            fill = reorder(Work.Location.Borough, MedianSalary),\n            scale = 0.8\n        ),\n        show.legend = FALSE,\n        alpha = 0.81\n    ) +\n    geom_boxplot(\n        mapping = aes(\n            x = Daily.Salary,\n            y = reorder(Work.Location.Borough, MedianSalary),\n            fill = reorder(Work.Location.Borough, MedianSalary)\n        ),\n        show.legend = FALSE,\n        alpha = 0.81,\n        lwd = 0.36,\n        width = 0.3\n    ) +\n    labs(\n        title = \"Distribution of Daily Pay by Borough\",\n        subtitle = \"Using Both Boxplots & Ridgeline Plots\",\n        x = \"Daily Salary\",\n        y = \"Borough\"\n    ) +\n    scale_x_continuous(\n        breaks = seq(0, 600, by = 50),\n        limits = c(0, 600)\n    ) +\n    theme_bw() + \n    scale_fill_brewer(palette = \"GnBu\")\n\n\nPicking joint bandwidth of 23.5\n\n\n\n\n\n\n\nCode\ntable(clean_nyc_payroll$Leave.Status.as.of.June.30)\n\n\n\n             ACTIVE              CEASED            ON LEAVE ON SEPARATION LEAVE \n               7460                1208                  98                  17 \n           SEASONAL \n                 73 \n\n\n\n\nCode\nalluvial_data &lt;- clean_nyc_payroll |&gt; filter(Leave.Status.as.of.June.30 %in% c(\"ACTIVE\", \"CEASED\")) |&gt;\n    count(Work.Location.Borough, Pay.Basis, Leave.Status.as.of.June.30) |&gt;\n    rename(axis1 = Work.Location.Borough, axis2 = Pay.Basis, axis3 = Leave.Status.as.of.June.30, Freq = n)\n\nordered_levels &lt;- alluvial_data %&gt;%\n    group_by(axis1) %&gt;%\n    summarize(total_count = sum(Freq)) %&gt;%\n    arrange(total_count) %&gt;%\n    pull(axis1)\n\nalluvial_data$axis1 &lt;- factor(alluvial_data$axis1, levels = rev(ordered_levels))\n\n\nggplot(alluvial_data,\n       aes(axis1 = axis1, axis2 = axis2, axis3 = axis3, y = Freq)) +\n    geom_alluvium(aes(fill = axis1)) +\n    geom_stratum() +\n    geom_text(stat = \"stratum\", aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))),\n              size = 1.8, vjust = 0.7) +\n    scale_x_discrete(limits = c(\"Boroughs\", \"Pay Basis\", \"Leave Status\")) + \n    labs(title = \"Variation of Leave Staus and Pay Basis by Boroughs\",\n         subtitle = \"Using Alluvial Plots\",\n         x = \"Variable Being Assessed\",\n         y = \"Frequency\",\n         fill = \"Boroughs\"\n    )\n\n\n\n\n\n\n\nCode\npayroll_breakdown &lt;- clean_nyc_payroll %&gt;%\n    filter(Total.Other.Pay &gt; 0, Total.OT.Paid &gt; 0, OT.Hours &gt; 0) %&gt;%\n    mutate(Hourly.Salary = Daily.Salary / 24,\n           Hourly.OT = Total.OT.Paid / OT.Hours) %&gt;%\n    filter(between(Total.Other.Pay, quantile(Total.Other.Pay, 0.25) - 1.5 * IQR(Total.Other.Pay), quantile(Total.Other.Pay, 0.75) + 1.5 * IQR(Total.Other.Pay)),\n           between(Hourly.Salary, quantile(Hourly.Salary, 0.25) - 1.5 * IQR(Hourly.Salary), quantile(Hourly.Salary, 0.75) + 1.5 * IQR(Hourly.Salary)),\n           between(Hourly.OT, quantile(Hourly.OT, 0.25) - 1.5 * IQR(Hourly.OT), quantile(Hourly.OT, 0.75) + 1.5 * IQR(Hourly.OT))) |&gt;\n    mutate(Hourly.Salary = (Hourly.Salary - min(Hourly.Salary)) / (max(Hourly.Salary) - min(Hourly.Salary)),\n           Hourly.OT = (Hourly.OT - min(Hourly.OT)) / (max(Hourly.OT) - min(Hourly.OT)),\n           Total.Other.Pay = (Total.Other.Pay - min(Total.Other.Pay)) / (max(Total.Other.Pay) - min(Total.Other.Pay)))\n\n\npayroll_long &lt;- payroll_breakdown %&gt;%\n    pivot_longer(cols = c(Hourly.Salary, Hourly.OT, Total.Other.Pay),\n                 names_to = \"Pay.Type\",\n                 values_to = \"Amount\")\n\nggplot(payroll_long, aes(x = Work.Location.Borough, y = Amount, fill = Pay.Type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(title = \"Comparison of Hourly Salary, Hourly OT, and Total Other Pay by Location\",\n         x = \"Location\",\n         y = \"Amount\") +\n    scale_fill_brewer(palette = \"Set2\") +\n    theme_bw()\n\n\n\n\n\nCode\n# TO BE SORTEDDDD\n# TO BE SORTEDDDD\n# TO BE SORTEDDDD\n# TO BE SORTEDDDD\n# TO BE SORTEDDDD"
=======
    "text": "Code\nlibrary(ggplot2)\nlibrary(forcats)\nclean_nyc_payroll &lt;- read.csv(\"./Data/cleaned_nyc_payroll.csv\")\n\nclean_nyc_payroll$Work.Location.Borough &lt;-factor(clean_nyc_payroll$Work.Location.Borough)\n              \nggplot(clean_nyc_payroll, aes(x = fct_infreq(Work.Location.Borough))) +\n  geom_bar(fill = \"cornflowerblue\") +\n  theme_minimal() +\n  labs(title = \"Distribution of Work place location\",\n       subtitle = \"Bar Plot\",\n       x = \"Borough\",\n       y = \"Number of Workers\")\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\n\n# Assuming clean_nyc_payroll is your dataset\nagency_counts &lt;- clean_nyc_payroll %&gt;%\n  count(Agency.Name) %&gt;%\n  arrange(desc(n))\n\n# Select the top 20 agencies\ntop_agencies &lt;- head(agency_counts, 25)\n\n# Create a category variable based on the count\ntop_agencies$category &lt;- cut(top_agencies$n, \n                             breaks = c(0, 150,  Inf),\n                             labels = c(\"0-150\", \"150-2000\"),\n                             include.lowest = TRUE)\n\n# Create the plot\nggplot(top_agencies, aes(x = reorder(Agency.Name, n), y = n)) +\n  geom_segment(aes(xend = Agency.Name, yend = 0), color = \"skyblue\") +\n  geom_point(color = \"blue\", size = 3) +\n  facet_wrap(~category, scales = \"free\", ncol =1)+\n  coord_flip() +\n  labs(title = \"Number of Workers in Top 20 Agencies by Category\",\n       subtitle = \"Faceted Cleveland Plot\",\n        y = \"Number of Workers\",\n        x = \"Agency\") +\n       \n  theme_bw()\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\n\ntitle_counts &lt;- clean_nyc_payroll %&gt;%\n count(Title.Description, Work.Location.Borough)\n\ntop_titles &lt;- title_counts %&gt;%\n  group_by(Title.Description) %&gt;%\n  summarise(Total = sum(n)) %&gt;%\n  top_n(20, Total) %&gt;%\n  pull(Title.Description)\n\nfiltered_title_counts &lt;- title_counts %&gt;%\n  filter(Title.Description %in% top_titles)\n\nwide_data &lt;- filtered_title_counts %&gt;%\n  pivot_wider(names_from = Work.Location.Borough, values_from = n, values_fill = list(n = 0))\n\n\nlong_data &lt;- wide_data %&gt;%\n  pivot_longer(cols = - Title.Description, names_to = \"Borough\", values_to = \"Count\")\n\nggplot(long_data, aes(x = Borough, y = Title.Description, fill = Count)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  labs(title = \"Top 20 Job Titles by Borough\",\n       subtitle = \"Heatmap\",\n       x = \"Borough\",\n       y = \"Job Profile\")\n\n\n\n\n\n\n\nCode\nlibrary(GGally)\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nCode\nlibrary(dplyr)\nlibrary(plotly)\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nCode\n# Calculate total years of experience\nclean_nyc_payroll$Total.Years.of.Experience &lt;- clean_nyc_payroll$Fiscal.Year - as.numeric(format(as.Date(clean_nyc_payroll$Agency.Start.Date, \"%m/%d/%Y\"), \"%Y\"))\n\nclean_nyc_payroll$Work.Location.Borough &lt;- as.factor(clean_nyc_payroll$Work.Location.Borough)\n\n# Filter data\nfiltered_data &lt;- clean_nyc_payroll %&gt;%\n  filter(OT.Hours &lt; 1500, Total.OT.Paid &gt; 0, Daily.Salary &lt; 1000)\np &lt;- ggparcoord(filtered_data, \n                columns = c( 19, 18, 15:16 ), \n                groupColumn = \"Work.Location.Borough\", \n                alphaLines = 0.5,\n                showPoints = TRUE) +\n  theme_minimal() +\n  labs(title = \"Overtime compensation compared to Daily Salary and Work Experience\",\n       subtitle = \"Interactive Parallel Plot \",\n       x = \"Variables\",\n       y = \"Scaled Values\")\n  \n\nplotly_plot &lt;- ggplotly(p)\nplotly_plot\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\n# Assuming clean_nyc_payroll is your dataset\n# Define a threshold for outliers (e.g., 1.5 standard deviations from the mean)\nsalary_sd &lt;- 1.5 * sd(clean_nyc_payroll$Base.Salary, na.rm = TRUE)\not_sd &lt;- 1.5 * sd(clean_nyc_payroll$Total.OT.Paid, na.rm = TRUE)\nsalary_mean &lt;- mean(clean_nyc_payroll$Base.Salary, na.rm = TRUE)\not_mean &lt;- mean(clean_nyc_payroll$Total.OT.Paid, na.rm = TRUE)\n\nmin_salary_threshold &lt;- 10000\nmin_ot_paid &lt;- 1000\n\nnyc_payroll_filtered &lt;- clean_nyc_payroll[abs(clean_nyc_payroll$Base.Salary - salary_mean) &lt; salary_sd & \n                                    abs(clean_nyc_payroll$Total.OT.Paid - ot_mean) &lt; ot_sd & \n                                    clean_nyc_payroll$Base.Salary &gt; min_salary_threshold & \n                                    clean_nyc_payroll$Total.OT.Paid &gt; min_ot_paid, ]\n\n# Create a new variable for color based on Base Salary being below or above $70,000\nnyc_payroll_filtered$Salary.Color &lt;- ifelse(nyc_payroll_filtered$Base.Salary &lt; 70000, \"green\", \"red\")\n\n# Create the scatter plot with filtered data and colored points\nggplot(nyc_payroll_filtered, aes(x = Base.Salary, y = Total.OT.Paid, color = Salary.Color)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Base Salary vs. Total OT Paid (Without Outliers)\",\n       x = \"Base Salary\",\n       y = \"Total OT Paid\") +\n  scale_color_identity() + # Use the actual colors specified in Salary.Color\n  theme_minimal()"
>>>>>>> c38acfea2deba0350478e4b3b52edaee3cbca7e8
  }
]