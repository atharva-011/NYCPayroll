{
  "hash": "cacc53680bc751b2c0c5708dfeda4cf2",
  "result": {
    "markdown": "# Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(knitr)\nlibrary(redav)\nlibrary(mi)\nlibrary(ggplot2)\n```\n:::\n\n\n## Technical Description\n\nThe data that we will be using to analyze Payroll Data is from the NYC Open Data [website](https://opendata.cityofnewyork.us/) and is titled as  [**Citywide Payroll Data (Fiscal Year)**](https://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e). The data set was created back in 2015 and has been constantly been updated on a annual basis (last update was on November 28,2023). It tells us about the amount of money spent on salaries and overtime pay for all municipal employees based in New York City. The data is provided by **Office of Payroll Administration (OPA)**. \n\nThe data can be downloaded as a [JSON file](https://data.cityofnewyork.us/resource/k397-673e.json) from the website mentioned above. We make an API request with this URL, to obtain the data and convert it to a Dataframe for further processing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#importing the dataset\ndata_url <- \"https://data.cityofnewyork.us/resource/k397-673e.json\"\n\nresponse <- httr::GET(url = data_url)\nnyc_payroll_data <- jsonlite::fromJSON(content(response, \"text\", encoding = \"UTF-8\"))\n\nprint(dim(nyc_payroll_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1000   17\n```\n:::\n:::\n\n\nThe data consists of 5.66 million rows (essentially 5.66 million municipal employees) and 17 columns. Every row basically tells us about the employee salary, their work location, agency, base pay, overtime (if any), etc. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display columns of the dataset\nkable(data.frame(Column_Names = names(nyc_payroll_data)), \"markdown\")\n```\n\n::: {.cell-output-display}\n|Column_Names               |\n|:--------------------------|\n|fiscal_year                |\n|payroll_number             |\n|agency_name                |\n|last_name                  |\n|first_name                 |\n|mid_init                   |\n|agency_start_date          |\n|work_location_borough      |\n|title_description          |\n|leave_status_as_of_june_30 |\n|base_salary                |\n|pay_basis                  |\n|regular_hours              |\n|regular_gross_paid         |\n|ot_hours                   |\n|total_ot_paid              |\n|total_other_pay            |\n:::\n:::\n\n\nPresented above are the columns of the dataset.\n\nOn further examination of the data, we find that there are few inconsistencies in the data:\n\n- The salaries for certain employees have not been mentioned per annum but on a per day or hour basis. Hence, we need to scale the data accordingly, to ensure that the data is uniform and fair comparisons can be made.\n\n- There exist some NAN values in the data.\n\n## Research Plan\n\nExplain in detail how your data will enable you to answer your research questions from the introduction. \n\n\n## Missing Value Analysis\n\nDescribe any patterns you discover in missing values. If no values are missing, graphs should still be included showing that.\n\n(suggested: 2 graphs plus commentary)\nShowing count of NAN values per column\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(nyc_payroll_data)) |> sort(decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  mid_init                fiscal_year \n                       282                          0 \n            payroll_number                agency_name \n                         0                          0 \n                 last_name                 first_name \n                         0                          0 \n         agency_start_date      work_location_borough \n                         0                          0 \n         title_description leave_status_as_of_june_30 \n                         0                          0 \n               base_salary                  pay_basis \n                         0                          0 \n             regular_hours         regular_gross_paid \n                         0                          0 \n                  ot_hours              total_ot_paid \n                         0                          0 \n           total_other_pay \n                         0 \n```\n:::\n:::\n\n\nWe see that only one column, namely `mid_init` has missing values. This feature represents the middle initial of the person under consideration. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_missing(nyc_payroll_data, percent = FALSE)\n```\n\n::: {.cell-output-display}\n![](data_files/figure-html/unnamed-chunk-5-1.png){width=2880}\n:::\n:::\n\n\nAs can be seen from the above plot, there are only two patterns which can be observed in our data. The first being the complete lack of NaN values, whereas the second pattern exhibits missing values in one column only, namely, `mid_init`.\n\nThe graph on the right shows that there are nearly 300 rows exhibiting the second pattern, and about 700 points exhibiting the first, where they do not have any missing values at all.\n\nWe also get to see which columns have missing values in the form of a bar chart on top, and see that only one column falls under this category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_data.frame(nyc_payroll_data) |> image()\n```\n\n::: {.cell-output-display}\n![](data_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nThis graph shows us the missing values in the entire dataset. The cells represent the actual values after scaling, defined by each row and column of the actual dataset. Higher values take on the lighter colors, whereas colors close to red represent values closer to -1. \n\nThe values in black, indicate missing data. Here, we see that `mid_init` has missing data for nearly 300 hundred contiguous rows.\n\nAlthough the absolute reason for the same is unknown, it could be possible that this data was not collected at all in that period. This can be inferred from the pattern.\n",
    "supporting": [
      "data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}